require 'iconv'

codepages = %w(ASCII
  ISO-8859-1 ISO-8859-1 ISO-8859-2 ISO-8859-3 ISO-8859-4 ISO-8859-5 ISO-8859-6 ISO-8859-7 ISO-8859-8 ISO-8859-9 
  ISO-8859-10 ISO-8859-11 ISO-8859-13 ISO-8859-14 ISO-8859-15 ISO-8859-16 
  CP1252 CP1250 CP1251 CP1253 CP1254 CP1256 CP1257 CP1258 CP874)

codepages.each do |cp|
  desc "Generate codepage table for #{cp}"

  task cp do
    generate_codepage_table(cp)
  end
end

task :default => codepages

def generate_codepage_table(cp)
  puts "Generating codepage table for #{cp}"
  ranges = codepage_table(cp)
  open(cp.downcase+".go", "w") do |f|
    f.puts "package codepage", ""
    f.puts "var #{cp.gsub('-', '_')} = Ranges{"
    ranges.each do |range|
      f.puts "\t{0x%04X, 0x%04X, %d, %d}," % [range.first, range.first + range.count - 1, range.count, range.delta]
    end
    f.puts "}"
  end
end

def codepage_table(cp)
  codepoints = Iconv.open("UCS-2BE//IGNORE", cp) do |ic|
    (0..255).map { |c| ic.iconv(c.chr) }.map { |s| s.unpack('n') }.map { |a| a.first }
  end
  ranges_from_ary(codepoints).sort { |a, b| a.first <=> b.first }
end

CPRange = Struct.new(:first, :count, :delta)

def ranges_from_ary(codepoints)
  ranges = []
  range = nil
  last_codepoint = 0

  codepoints.each_with_index do |codepoint, i|
    next if codepoint.nil?
    if range.nil? or (codepoint != last_codepoint + 1)
      range = CPRange.new(codepoint, 1, i - codepoint)
      ranges << range
    else
      range.count += 1
    end
    last_codepoint = codepoint
  end

  ranges
end

task :cpselect do
  tables = codepages.map { |cp| codepage_table(cp) }
end
